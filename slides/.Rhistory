sd <-   30; # cc
alpha <- 0.05;
sides <- 2;
t <- qt(1 - alpha/sides, N);
t
N <- 9;
mu <- 1100; # cc
sd <-   30; # cc
alpha <- 0.05;
sides <- 2;
t <- qt(1 - alpha/sides, N);
mu + c(-1, 1) * t * sd/sqrt(N)
t.test
?t.test
data <- data.frame(
baseline = c(140, 138, 150, 148, 135),
week2    = c(132, 135, 151, 146, 130)
);
data
test <- t.test(data$baseline, data$week2, paired=T);
test
test <- t.test(data$baseline, data$week2, paired=F);
test
test <- t.test(data$baseline, data$week2, paired=T, alt="one.sided");
test <- t.test(data$baseline, data$week2, paired=T, alt="less");
test
test <- t.test(data$baseline, data$week2, paired=T, alt="greater");
test
data <- data.frame(
baseline = c(140, 138, 150, 148, 135),
week2    = c(132, 135, 151, 146, 130)
);
test <- t.test(data$baseline, data$week2, paired=T, alt="two.sided");
test
ppois
?ppois
qpois(p, lambda, lower.tail=T)
p <- 10/1787;
lambda <- 1/100;
qpois(p, lambda, lower.tail=T)
ppois(p, lambda, lower.tail=T)
ppois(lambda, lambda, lower.tail=T)
qpois(lambda, lambda, lower.tail=T)
p
1/100
p <- 10/1787;
lambda <- 1/100;
qpois(p, lambda, lower.tail=T)
observed  <- 10/1787;
benchmark <-  1/100;
qpois(benchmark, observed, lower.tail=T)
observed  <- 10/1787;
benchmark <-  1/100;
qpois(observed, benchmark, lower.tail=T)
?pbinom
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
t <- qt(0.975, df)
ts <- (mn.placebo - mn.treated) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
t <- qt(0.975, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
?pt
?pbinom
pbinom(q=3/4, size=4, prob=1/2)
pbinom(q=1/2, size=4, prob=1/2)
pbinom(q=0, size=4, prob=1/2)
qbinom(q=3/4, size=4, prob=1/2)
qbinom(p=3/4, size=4, prob=1/2)
pbinom(q=3, size=4, prob=1/2)
pbinom(q=3, size=4, prob=1/2, lower.tail=F)
pbinom(q=2, size=4, prob=1/2, lower.tail=F)
pbinom(q=200, size=400, prob=1/2, lower.tail=T)
pbinom(q=2000, size=4000, prob=1/2, lower.tail=T)
pbinom(q=2, size=4, prob=1/2, lower.tail=F)
1 - pbinom(q=successes, size=size, prob=1/2, lower.tail=T)
size <- 4;
successes <- 3;
1 - pbinom(q=successes, size=size, prob=1/2, lower.tail=T)
size <- 4;
successes <- 3;
1 - pbinom(q=successes-1, size=size, prob=1/2, lower.tail=T)
pbinom(q=successes-1, size=size, prob=1/2, lower.tail=F)
?ppois
?ppois
ppois(observed, days * benchmark, lower.tail=T)
days <- 1787;
observed  <- 10;
benchmark <-  1/100;
ppois(observed, days * benchmark, lower.tail=T)
?pt
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
t <- qt(0.975, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
alpha <- 0.05;
sides <- 2;
t <- qt(1-alpha/sides, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
alpha <- 0.01;
sides <- 2;
t <- qt(1-alpha/sides, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
alpha <- 0.001;
sides <- 2;
t <- qt(1-alpha/sides, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
alpha <- 0.00001;
sides <- 2;
t <- qt(1-alpha/sides, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
df <- N + K - 2;
vp <- ((N - 1) * sd.treated^2 + (K - 1) * sd.placebo^2) / df;
sp <- sqrt(vp);
alpha <- 0.01;
sides <- 2;
t <- qt(1-alpha/sides, df)
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sp * sqrt(1/N + 1/K);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
# "Total variance"
vt <- sd.placebo^2/K + sd.treated^2/N;
dfn <- vt^2;
dfd.k <- (sd.placebo^2/K)^2 / (K - 1);
dfd.n <- (sd.treated^2/N)^2 / (N - 1);
dfd <- dfd.k + dfd.n;
df <- dfn / dfd;
alpha <- 0.01;
sides <- 2;
t <- qt(1-alpha/sides, df)
s <- sqrt(1/N + 1/K);
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sqrt(vt);
ts
rm(list = ls());
N <- 9;
mn.treated <- -3;
sd.treated <- 1.5;
K <- 9;
mn.placebo <- 1;
sd.placebo <- 1.8;
# "Total variance"
vt <- sd.placebo^2/K + sd.treated^2/N;
dfn <- vt^2;
dfd.k <- (sd.placebo^2/K)^2 / (K - 1);
dfd.n <- (sd.treated^2/N)^2 / (N - 1);
dfd <- dfd.k + dfd.n;
df <- dfn / dfd;
alpha <- 0.0001;
sides <- 2;
t <- qt(1-alpha/sides, df)
s <- sqrt(1/N + 1/K);
ts <- (mn.treated - mn.placebo) + c(-1, 1) * t * sqrt(vt);
ts
show
library(AppliedPredictiveModeling);
library(ElemStatLearn)
library(caret);
library(pgmm);
library(tree);
# Q1
rm(list = ls());
data(segmentationOriginal);
training <- segmentationOriginal[segmentationOriginal$Case == "Train", ];
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", ];
set.seed(125);
model = train(Class ~ ., data = training, method="rpart");
model$finalModel
rm(list = ls());
data(olive);
names(olive);
olive <- olive[, -1];
names(olive);
newdata = as.data.frame(t(colMeans(olive)))
# olive$Area <- as.factor(olive$Area);
model <- tree(Area ~ ., data = olive);
predictions <- predict(model, newdata=newdata);
predictions
str(olive)
rm(list = ls());
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
model = train(
chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA,
method="glm",
family = "binomial"
);
missClass = function(values, prediction) {
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(trainSA$chd, predict(model, newdata=trainSA));
missClass(testSA$chd, predict(model, newdata=testSA));
rm(list = ls());
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y);
vowel.test$y <- as.factor(vowel.test$y);
set.seed(33833);
# model <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE);
model <- cforest(y ~ ., data = vowel.train);
vars <- varimp(model);
sort(vars, decreasing = T);
library(AppliedPredictiveModeling);
library(ElemStatLearn)
library(caret);
library(pgmm);
library(tree);
rm(list = ls());
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y);
vowel.test$y <- as.factor(vowel.test$y);
set.seed(33833);
# model <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE);
model <- cforest(y ~ ., data = vowel.train);
vars <- varimp(model);
sort(vars, decreasing = T);
?cforest
library(party);
rm(list = ls());
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y);
vowel.test$y <- as.factor(vowel.test$y);
set.seed(33833);
# model <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE);
model <- cforest(y ~ ., data = vowel.train);
vars <- varimp(model);
sort(vars, decreasing = T);
vars
rm(list = ls());
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y);
vowel.test$y <- as.factor(vowel.test$y);
set.seed(33833);
model <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE);
# model <- cforest(y ~ ., data = vowel.train);
vars <- varimp(model);
sort(vars, decreasing = T);
model
varimp(model)
varimp(model$finalmodel)
str(model)
runApp()
library(shiny);
runApp()
setwd("~/Courses/Developing Data Products/Project")
setwd("~/Courses/Developing Data Products/Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par(c(2,1))
?par
?par
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sample
runif
?runif
?rexp
?rt
rchi
?rchi
?rf
?rc
?rg
?rgamma
?runif
?rexp
runApp()
runApp()
?lnorm
colors()
grep("yellow", colors())
colors()[grep("yellow", colors())]
theme <- NULL;
theme <- data.frame(theme, c("ibiza", "yellow", "blue"));
theme <- data.frame(theme, c("babies", "lightblue", "pink");
theme <- data.frame(type=c(), pc=c(), sc=c());
theme
names(theme)
theme <- data.frame(theme, c("ibiza", "yellow", "blue"));
theme <- data.frame(c("ibiza", "yellow", "blue"));
theme
?rbind
themes <- rbind(
c("ibiza", "yellow", "blue"),
c("babies", "lightblue", "pink")
);
themes
themes <- rbind(
c("ibiza", "yellow", "blue"),
c("babies", "lightblue", "pink")
);
themes <- data.frame(themes);
themes
themes <- rbind(
c("ibiza", "yellow", "blue"),
c("babies", "lightblue", "pink")
);
theme <- data.frame(themes);
names(theme) <- c("type", "pcol", "scol");
themes <- data.frame(
rbind(
c("ibiza", "yellow", "blue"),
c("babies", "lightblue", "pink")
)
);
names(themes) <- c("type", "pcol", "scol");
themes
runApp()
runApp()
runApp()
runApp()
themes <- data.frame(
rbind(
c("ibiza", "yellow", "blue"),
c("babies", "lightblue", "pink")
)
);
names(themes) <- c("type", "pcol", "scol");
themes
theme <- themes[themes$type == "babies", ];
theme
theme$pcol
theme$pcol
as.string(theme$pcol)
as.text(theme$pcol)
string(theme$pcol)
text(theme$pcol)
toString(theme$pcol)
runApp()
runApp()
runApp()
runApp()
colors()[grep("orange", colors())
]
runApp()
runApp()
colors()[grep("grey", colors())]
colors()[grep("orange", colors())]
runApp()
runApp()
runApp()
hist
?hist
runApp()
runApp()
runApp()
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github("ramnathv/slidifyLibraries")
setwd("~/Courses/Developing Data Products/Project")
author("clt_deck")
library("slidify")
author("clt_deck")
---
;
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
slidify('index.Rmd')
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
publish_github("Liondance", "CLT")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
publish_github("Liondance", "CLT")
browseURL("index.html")
